import streamlit as st
import cohere
from datetime import datetime
from utils.auth import check_password, logout
from utils.storage import DocumentManager, load_vectorstore
from utils.pdf_processor import process_pdf
from config import COHERE_API_KEY, COHERE_MODEL, SCHOOL_CONTACT_INFO

# Initialize Cohere client
co = cohere.Client(api_key=COHERE_API_KEY)

class ChatPDFApp:
    def __init__(self):
        self.doc_manager = DocumentManager()
        self.setup_page()
    
    def setup_page(self):
        """Configure page settings"""
        st.set_page_config(
            page_title="ChatPDF Bot",
            page_icon="ü§ñ",
            layout="wide"
        )
        
        # Th√™m menu Settings v√†o sidebar
        with st.sidebar:
            if st.button("‚öôÔ∏è Thi·∫øt l·∫≠p"):
                st.session_state.show_settings = True
            if st.button("üí¨ Chat"):
                st.session_state.show_settings = False
                
            if hasattr(st.session_state, 'is_authenticated') and st.session_state.is_authenticated:
                if st.button("ƒêƒÉng xu·∫•t"):
                    logout()

    def handle_file_upload(self, uploaded_file, title, description):
        """Process file upload with error handling"""
        try:
            with st.spinner("ƒêang x·ª≠ l√Ω file PDF..."):
                doc_id = self.doc_manager.add_document(
                    uploaded_file.name,
                    title,
                    description,
                    uploaded_file.size
                )
                
                if process_pdf(uploaded_file, doc_id):
                    st.success("Upload v√† x·ª≠ l√Ω PDF th√†nh c√¥ng!")
                    return True
                    
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω file: {str(e)}")
            return False

    def get_chat_response(self, prompt, context):
        """Generate chat response using Cohere"""
        system_prompt = f"""B·∫°n l√† tr·ª£ l√Ω tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n t√†i li·ªáu. 
        H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a v√†o ng·ªØ c·∫£nh ƒë∆∞·ª£c cung c·∫•p.
        N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin trong ng·ªØ c·∫£nh, h√£y h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng li√™n h·ªá:
        {SCHOOL_CONTACT_INFO}
        
        Ng·ªØ c·∫£nh: {context}"""
        
        return co.chat(
            message=prompt,
            temperature=0.5,
            model=COHERE_MODEL,
            preamble=system_prompt,
        )

    def settings_page(self):
        """Render settings page with admin functions"""
        st.title("Thi·∫øt l·∫≠p - Qu·∫£n l√Ω t√†i li·ªáu PDF")
        
        if not check_password():
            return
            
        tab1, tab2 = st.tabs(["Upload T√†i Li·ªáu", "Qu·∫£n L√Ω T√†i Li·ªáu"])
        
        with tab1:
            with st.form("upload_form"):
                uploaded_file = st.file_uploader("Ch·ªçn file PDF", type="pdf")
                title = st.text_input("Ti√™u ƒë·ªÅ t√†i li·ªáu:")
                description = st.text_area("M√¥ t·∫£ t√†i li·ªáu:")
                
                if st.form_submit_button("Upload"):
                    if not (uploaded_file and title):
                        st.warning("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                        return
                        
                    self.handle_file_upload(uploaded_file, title, description)
            
        with tab2:
            st.subheader("Danh s√°ch t√†i li·ªáu")
            docs = self.doc_manager.get_all_documents()
            
            for doc_id, doc in docs.items():
                with st.expander(f"üìÑ {doc['title']}"):
                    st.write(f"**M√¥ t·∫£:** {doc['description']}")
                    st.write(f"**File g·ªëc:** {doc['file_name']}")
                    st.write(f"**K√≠ch th∆∞·ªõc:** {doc['file_size'] / 1024:.1f} KB")
                    st.write(f"**Ng√†y upload:** {datetime.fromisoformat(doc['upload_date']).strftime('%d/%m/%Y %H:%M')}")
                    
                    if st.button(f"üóëÔ∏è X√≥a t√†i li·ªáu", key=f"del_{doc_id}"):
                        if self.doc_manager.delete_document(doc_id):
                            st.success("ƒê√£ x√≥a t√†i li·ªáu!")
                            st.rerun()
                        else:
                            st.error("Kh√¥ng th·ªÉ x√≥a t√†i li·ªáu!")

    def chat_page(self):
        """Render simplified chat interface"""
        st.title("T∆∞ v·∫•n tuy·ªÉn sinh - COFER Bot ü§ñ")
        
        docs = self.doc_manager.get_all_documents()
        if not docs:
            st.info("Ch∆∞a c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c upload. Vui l√≤ng li√™n h·ªá admin.")
            return
            
        # Get the first document (most recently uploaded)
        latest_doc_id = list(docs.keys())[0]
            
        # Initialize chat history
        if "messages" not in st.session_state:
            st.session_state.messages = []
            
        # Display chat history
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                
        # Handle new messages
        if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n"):
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
                
            vectorstore = load_vectorstore(latest_doc_id)
            if not vectorstore:
                st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t√†i li·ªáu!")
                return
                
            # Find relevant passages
            docs = vectorstore.similarity_search(prompt, k=3)
            context = "\n".join([doc.page_content for doc in docs])
            
            # Generate and display response
            response = self.get_chat_response(prompt, context)
            st.session_state.messages.append({"role": "assistant", "content": response.text})
            with st.chat_message("assistant"):
                st.markdown(response.text)

    def main(self):
        """Main application logic"""
        # Initialize show_settings in session state if not present
        if 'show_settings' not in st.session_state:
            st.session_state.show_settings = False
            
        # Show either settings or chat page based on session state
        if st.session_state.show_settings:
            self.settings_page()
        else:
            self.chat_page()

def main():
    app = ChatPDFApp()
    app.main()

if __name__ == "__main__":
    main()
